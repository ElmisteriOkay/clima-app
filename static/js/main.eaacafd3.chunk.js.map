{"version":3,"sources":["components/Data.js","App.js","serviceWorker.js","index.js"],"names":["Data","weather","useState","grados","setGrados","main","className","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuiler","Date","Math","round","temp","type","id","onChange","e","selected","label","for","api","App","query","setQuery","setWeather","placeholder","target","value","onKeyPress","key","fetch","then","res","json","result","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wJAqDeA,MAnDf,YAAyB,IAAVC,EAAS,EAATA,QAAS,EACQC,mBAAS,IADjB,mBACbC,EADa,KACLC,EADK,KAgBpB,OACA,6BACyB,oBAAhBH,EAAQI,KACb,6BACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,YAAYL,EAAQM,KAAnC,KAA2CN,EAAQO,IAAIC,SACvD,yBAAKH,UAAU,QAnBJ,SAACI,GAChB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAUPE,CAAW,IAAIC,QAGxC,yBAAKd,UAAU,eACb,yBAAKA,UAAU,QAEC,MAAXH,EAAD,UACIkB,KAAKC,MAAMrB,EAAQI,KAAKkB,MAD5B,mBAEIF,KAAKC,MAAO,IAAArB,EAAQI,KAAKkB,KAAgB,IAF7C,UAMJ,yBAAKjB,UAAU,aACb,yBAAKA,UAAU,WACb,2BAAOkB,KAAK,QAAQjB,KAAK,IAAIkB,GAAG,UAAUC,SAAU,SAAAC,GAAC,OAAIvB,EAAU,MAAMwB,UAAQ,IACjF,2BAAOC,OAAK,EAACC,IAAI,WAAjB,UAEF,yBAAKxB,UAAU,cACb,2BAAOkB,KAAK,QAAQjB,KAAK,IAAIkB,GAAG,aAAaC,SAAU,SAAAC,GAAC,OAAIvB,EAAU,QACtE,2BAAO0B,IAAI,aAAX,WAGJ,yBAAKxB,UAAU,WAAWL,EAAQA,QAAQ,GAAGI,QAG9C,KC9CL0B,EACC,mCADDA,EAEE,2CA8COC,MA3Cf,WAAgB,IAAD,EACa9B,mBAAS,UADtB,mBACN+B,EADM,KACCC,EADD,OAEiBhC,mBAAS,IAF1B,mBAEND,EAFM,KAEGkC,EAFH,KAgBb,OACE,yBAAK7B,UACsB,oBAAhBL,EAAQI,MACbJ,EAAQI,KAAKkB,KAAO,GACpB,WACS,OAGb,8BACE,yBAAKjB,UAAU,cACb,2BACEkB,KAAK,OACLlB,UAAU,aACV8B,YAAY,YACZV,SAAU,SAAAC,GAAC,OAAIO,EAASP,EAAEU,OAAOC,QACjCA,MAAOL,EACPM,WA5BK,SAAAZ,GACA,UAAVA,EAAEa,KACHC,MAAM,GAAD,OAAIV,EAAJ,qBAAyBE,EAAzB,+BAAqDF,IACzDW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFV,EAAWU,GACXX,EAAS,WA0BX,kBAAC,EAAD,CAAMjC,QAASA,OChCH6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.eaacafd3.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nfunction Data({weather}){\n    const [grados, setGrados] = useState('');\n\n    const dateBuiler = (d) => {\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    \n        let day = days[d.getDay()];\n        let date = d.getDate();\n        let month = months[d.getMonth()];\n        let year = d.getFullYear();\n    \n        return `${day} ${date} ${month} ${year}`;\n    }\n\n\n    return (\n    <div>\n    {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuiler(new Date())}</div>\n          </div>\n\n          <div className=\"weather-box\">\n            <div className=\"temp\">\n              {\n                (grados === 'c') ? \n                (`${Math.round(weather.main.temp)}ºC`) : \n                (`${Math.round((weather.main.temp * (9/5)) + 32)}ºF`)\n              }\n\n            </div>\n            <div className=\"type-temp\">\n              <div className=\"celcius\">\n                <input type=\"radio\" name=\"g\" id=\"celcius\" onChange={e => setGrados('c')} selected/>\n                <label label for=\"celcius\">Cº</label>\n              </div>\n              <div className=\"fahrenheit\">\n                <input type=\"radio\" name=\"g\" id=\"fahrenheit\" onChange={e => setGrados('f')}/>\n                <label for=\"farenheit\">Fº</label>\n              </div>\n            </div>\n            <div className=\"weather\">{weather.weather[0].main}</div>\n          </div>  \n        </div>\n      ) : ('')}</div>);\n\n}\n\nexport default Data;","import React, {useState} from 'react';\nimport Data from './components/Data';\n\nconst api = {\n  key: \"bedfd8f1fa72e543d6e7f6a9f82319dc\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('London');\n  const [weather, setWeather] = useState({});\n\n  const search = e => {\n    if(e.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n          setWeather(result);\n          setQuery('');\n        }\n      )\n    }\n  }\n\n  return (\n    <div className=\n      {(typeof weather.main != \"undefined\") ? \n        ((weather.main.temp > 18) \n        ? 'app warm'\n        : 'app') : 'app'\n      }\n        >\n      <main>\n        <div className=\"search-box\">\n          <input \n            type=\"text\" \n            className=\"search-bar\" \n            placeholder=\"Search...\" \n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n\n        <Data weather={weather}/>\n        \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}